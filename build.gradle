plugins {
	id("java")
	id("java-library")
	id("maven-publish")
	id("eclipse")
	id("org.spongepowered.gradle.plugin") version "2.0.2"
	id("org.spongepowered.gradle.vanilla") version "0.2.1-SNAPSHOT"
}

minecraft {
	version("${minecraft}")
}

group = "sawfowl.regionguard"
version = "${major}.${minor}.${patch}-${suffix}-S${api}"

java {
	sourceCompatibility = targetCompatibility = JavaVersion.VERSION_21
}
compileJava.options.compilerArgs << "-Xmaxerrs" << "9999"

repositories {
	mavenCentral()

	maven {
		name = "Forge"
		url = 'https://maven.minecraftforge.net'
	}
	maven {
		name = "Sponge"
		url = "https://repo.spongepowered.org/repository/maven-public"
	}
	maven {
		name = "AspectRepo"
		url 'https://maven.aspect-realms.ru/repository/maven-public/'
	}
}

tasks.withType(JavaCompile) {
	options.encoding = 'UTF-8'
}

dependencies {
	implementation "org.spongepowered:spongeapi:${api}"
	implementation "org.spongepowered:spongevanilla:1.21-12.0.0-RC1779:universal"
	implementation "com.github.SawFowl:LocaleAPI:${localeapi}"
	implementation "com.github.SawFowl:CommandPack:${commandpack}"
	//implementation fileTree(dir: 'libs', include: '*.jar')
}

sponge {
	apiVersion("${api}")
	loader {
		name("java_plain")
		version("1.0")
	}
	license("GPL-3.0")
	plugin("regionguard") {
		displayName(project.name.capitalize())
		version("${project.version}")
		entrypoint("${project.group}.RegionGuard")
		description("Create regions and protect them from various actions of other players.")
		links {
			homepage("https://discord.gg/7xnZGSYJH9")
			source("https://github.com/SawFowl/RegionGuard")
			issues("https://discord.gg/7xnZGSYJH9")
		}
		contributor("SawFowl") {
			description("Lead Developer")
		}
		dependency("spongeapi") {
			optional(false)
			loadOrder("after")
			version("${api}")
		}
		dependency("localeapi") {
			optional(false)
			loadOrder("after")
			version("${localeapi}")
		}
		dependency("commandpack") {
			optional(false)
			loadOrder("after")
			version("${commandpack}")
		}
		dependency("mysqldriver") {
			optional(true)
			loadOrder("after")
			version("1.0.0")
		}
		dependency("h2driver") {
			optional(true)
			loadOrder("after")
			version("1.0.0")
		}
	}
}

task sourcesJar(type: Jar, dependsOn: classes) {
	archiveClassifier = 'sources'
	from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	archiveClassifier = 'javadoc'
	from javadoc.destinationDir
}

artifacts {
	archives sourcesJar
	archives javadocJar
}

configurations {
	doc {
		transitive false
	}
}

javadoc {
	options.encoding = 'UTF-8'
	source configurations.doc.collect { zipTree(it) }
	options.addStringOption('Xdoclint:none', '-quiet')
}
